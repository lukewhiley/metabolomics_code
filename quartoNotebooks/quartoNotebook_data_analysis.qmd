---
title: Metabolomics data analysis
format:
  html:
    code-fold: true
    code-tools: true
    df-print: paged
    toc: true
    toc-depth: 5
    self-contained: true
editor: visual
theme: cosmo
---

<!--# Quarto notebook for metabolomics data analysis -->

```{r notebook instructions, eval=FALSE, echo=FALSE}

# CSV DATA FILES SHOULD CONTAIN THE FOLLOWING COLUMN HEADERS AS A MINIMUM:
  # "sample_idx" - numeric column containing numeric index of sample location
  # "sample_name" - column containing string descriptor of sample file name
  # "sample_ID" - column containing string descriptor of sample id
  # "sample_class" - column containing string descriptor of sample class
  # "sample_type" - column containing "sample" or "qc" string
  # "sample_batch" - batch or plate number for batch correction (if required)

  # Column headers should contain metabolite or feature names: 
    #e.g. CE(14:0) or TRYPTOPHAN or 2.86_180.0882m/z etc


```

<!--# USER INPUT HERE -->

## Project details

```{r user input, eval=TRUE, echo=TRUE}

# USER INPUT REQUIRED BELOW
master_list <- list(project_options = list(
  project_name = "COVID; Cambridge; Q300", #name of project
  user_name = "LGW", # user of notebook
  project_dir = "/Users/lukegraywhiley/Library/CloudStorage/OneDrive-MurdochUniversity/projects/NICHOLSON-COVID/analysis/COVID_Cambridge/Q300", # project directory
  project_data_subdir = "/data", # sub directory containing .csv prepared using headers listed above
  project_class_column_header = "sample_current_severity",
  project_classes =  c("neg", "no O2", "low flow O2", "vent", "ECMO", "qc"),  #descriptor strings for each class of data, inlcude qc here
  opls = list(control = "neg", # descriptor string for the control group to be used in OPLS-DA analysis.
             case = c("no O2", "low flow O2", "vent", "ECMO")),  # descriptor string for the case group. Used for OPLS-DA analysis. Case can contain multiple comparisons; e.g. c("x1", "x2") to produce multiple OPLS-DA
  univariate = list(comparison = c("neg", "no O2", "low flow O2", "vent", "ECMO"),  # descriptor strings for desired univariate comparisons
                   method = "kruskal.test"), #method used for univariate OPTIONS = kruskal.test, wilcox.test, wilcox.test.paired
  project_outliers = NA # descriptor strings for samples to be removed from analysis. Note -  must match string in sample_name column.
))


cat(paste0("Project: ", master_list$project_options$project_name)); cat(paste0("Author: ", master_list$project_options$user_name))
```

<!--# automated from this point forwards-->

## Project set up and data import summary

```{r load packages and set up project structure, eval=TRUE, echo=TRUE, paged.print=TRUE, warning=FALSE, results = 'asis'}

#### load packages
package_list <- c('plyr', 'tidyverse', 'janitor', 'shiny', 'plotly', 'effsize', 'dunn.test', 'RColorBrewer', 'statTarget', 'ropls', 'metabom8', 'rstatix', 'ggpubr', 'cowplot', 'knitr', 'kableExtra', 'stats', 'viridisLite', 'stringr')

for(idx_package in package_list){
  if(length(which(row.names(installed.packages()) == idx_package)) > 0){
  suppressMessages(require(package = idx_package,
                                         character.only = TRUE))
  } else {
    paste0(idx_package, " is not installed. Please install ", idx_package, " before continuing.") %>% print()
  }
}

#string for function directory
func_dir = "/Users/lukegraywhiley/Documents/GitHub/metabolomics_code/functions/"

#filelist of datafiles from project path to undergo analysis. Data must be stored in appropiate subfolder.
data_filelist <- list.files(path = paste0(master_list$project_options$project_dir,
                                          master_list$project_options$project_data_subdir),
                            pattern = ".csv",
                            full.names = TRUE)

#set up project list structure and append colours (autogenerated using brewer.pal)
master_list <- lst(project_details = master_list$project_options %>%
                     list_modify(., 
                                 project_colours = brewer.pal(n= length(.[["project_classes"]]), name = "Accent"),
                                 sub_projects = array(dim = length(data_filelist))),
                   functions = lst(
                     LGW_FUNC_dataRead = source(paste0(func_dir ,"LGW_FUNC_dataRead.R")),
                     LGW_FUNC_impute = source(paste0(func_dir, "LGW_FUNC_impute_halfmin.R")),
                     LGW_FUNC_pca = source(paste0(func_dir, "Quarto_LGW_FUNC_rPCA.R")),
                     LGW_FUNC_rOPLS = source(paste0(func_dir, "Quarto_LGW_FUNC_rOPLS.R")),
                     LGW_FUNC_univariate = source(paste0(func_dir, "2021_LGW_FUNC_compare_means_ggplot_boxplots.R"))
                     ),
                   tables = lst(project_overview = lst()))

# read in data


#execute function
for(idx_filepath in 1:length(data_filelist)){
  master_list$project_details$sub_projects[idx_filepath] <- gsub(x = strsplit(data_filelist[idx_filepath], paste0(master_list$project_details$project_data_subdir, "/"))[[1]][2], pattern = ".csv", replacement = "")
 
  master_list[[master_list$project_details$sub_projects[idx_filepath]]] <- lst(
    data = lst(
      master_data = master_list$functions$LGW_FUNC_dataRead$value(
        FUNC_datapath = data_filelist[idx_filepath],
        FUNC_annotation_tag = "sample"),
      filtered_data = lst(),
      imputed_data = lst()
  ))
  
  idx_data <- master_list$project_details$sub_projects[idx_filepath]
  
#add factor columns for control of colours for plotting
  master_list[[idx_data]]$data$master_data$annotation <- master_list[[idx_data]]$data$master_data$annotation %>%
    #sample_class
    mutate(across(.cols = all_of(master_list$project_details$project_class_column_header),
                  .fns = ~factor(.x, levels = c(master_list$project_details$project_classes), ordered = TRUE),
                  .names = "sample_class_factor")) %>%
    #sample type
    mutate(across(.cols = sample_type,
                  .fns = ~factor(.x, levels = c("qc", "sample"), ordered = TRUE),
                  .names = "sample_type_factor")) %>%
    #sample_batch
    mutate(across(.cols = sample_batch,
                  .fns = ~factor(.x, levels = unique(.), ordered = TRUE),
                  .names = "sample_batch_factor"))
             
  #filter to only include sample classes desired by user
        #find idx of rows containg sample_class defined by user as project_classes in chunk 1.
  keep_idx_class <- which(
    master_list[[idx_data]]$data$master_data$annotation[[master_list$project_details$project_class_column_header]] %in% master_list$project_details$project_classes)

    #run apply to remove sample classes not desired by user
  master_list[[idx_data]]$data$master_data[1:2] <- lapply(
    X = master_list[[idx_data]]$data$master_data[1:2], 
    FUN = function(x) x[keep_idx_class,])
  
  #create summary tibble for printing
  master_list$tables$project_overview <- master_list$tables$project_overview %>%
    bind_rows(., tibble(
      project = idx_data,
      features = ncol(master_list[[idx_data]]$data$master_data[[idx_filepath]]$data),
      total_samples = nrow(master_list[[idx_data]]$data$master_data$annotation),
      qc_samples = nrow(master_list[[idx_data]]$data$master_data$annotation %>% 
                          filter(sample_type =="qc")),
      study_samples = nrow(master_list[[idx_data]]$data$master_data$annotation %>% 
                             filter(sample_type =="sample"))
      ) %>% bind_cols(.,
      master_list[[idx_data]]$data$master_data$annotation[[master_list$project_details$project_class_column_header]] %>%
        table() %>% as.matrix %>% t %>% as_tibble())
    )
  
  #set result lst for exporting results
  master_list[[idx_data]]$results <- lst()
  }


#print table for report
master_list$tables$project_overview %>% 
  kbl(align = "c") %>% 
  kable_minimal("hover", full_width = T)
```

## Outlier removal

```{r filter data, eval = TRUE, echo = TRUE, warning=FALSE}

# this chunk is to subset data, removing outliers
# if no outliers - set as NA

#set empty list
master_list$tables$project_overview_filtered <- lst()

for(idx_data in master_list$project_details$sub_projects){
  
  if(is.na(master_list$project_details$project_outliers)){
  master_list[[idx_data]]$data$filtered_data <- master_list[[idx_data]]$data$master_data
  master_list$tables$project_overview_filtered <- master_list$tables$project_overview
  #cat("No outliers removed")
  } else {
  
  #find idx of rows containg sample_class defined by user as project_classes in chunk 1.
  keep_idx_class <- which(master_list[[idx_data]]$data$master_data$annotation[[master_list$project_details$project_class_column_header]] %in% master_list$project_details$sample_class)  
  #find idx of rows that are not outliers defined by user as project_outliers in chunk 1.
  keep_idx_outlier <- which(!master_list[[idx_data]]$data$master_data$annotation$sample_name %in% master_list$project_details$project_outliers)

  #run apply to remove outliers
  master_list[[idx_data]]$data$filtered_data[1:2] <- lapply(X = master_list[[idx_data]]$data$master_data[1:2], 
                                                            FUN = function(x) x[keep_idx_outlier,])
  
  #add feature list to filtered data
   master_list[[idx_data]]$data$filtered_data[3] <-  master_list[[idx_data]]$data$master_data[3]
  
     master_list$tables$project_overview_filtered <- master_list$tables$project_overview_filtered %>%
    bind_rows(.,
              tibble(project = (master_list[[idx_data]]$data$filtered_data %>% names()),
                     features = ncol(master_list[[idx_data]]$data$filtered_data$data),
                     total_samples = nrow(master_list[[idx_data]]$data$filtered_data$annotation),
                     qc_samples = nrow(master_list$data$master_data[[idx_filepath]]$annotation %>% filter(sample_type =="qc")),
                     study_samples = nrow(master_list[[idx_data]]$data$filtered_data$annotation %>% filter(sample_type =="sample"))
                     ) %>%
                bind_cols(. ,
                          master_list[[idx_data]]$data$filtered_data$annotation[[master_list$project_details$project_class_column_header]] %>% table() %>% as.matrix %>% t %>% as_tibble())
              )
  }
}

#clean environment
rm(list = c(ls()[which(ls() != "master_list")]))

if(is.na(master_list$project_details$project_outliers)){cat("No outliers removed")} else {
  cat("Updated sample table:")
  master_list$tables$project_overview_filtered %>% 
  kbl(align = "c") %>% 
  kable_minimal("hover", full_width = T)
}
```

## Missing value and imputation overview

-   Missing values also include NA, NaN and zeros

-   Missing values are treated as \< lower limit of detection (LLOD)

-   Imputation is computed individually for each metabolite.

-   Missing values are filled using the half minimum concentration value for each metabolite.

```{r missing value overview and impute, eval = TRUE, echo = TRUE}

master_list$functions$LGW_FUNC_impute <- source('/Users/lukegraywhiley/Documents/GitHub/metabolomics_code/functions/LGW_FUNC_impute_halfmin.R')

#set empty table for output
master_list$tables$missing_values_table <- lst()

#run impution loop for each dataset
for(idx_data in master_list$project_details$sub_projects){
      master_list[[idx_data]]$data$imputed_data <- list(
        annotation = master_list[[idx_data]]$data$filtered_data$annotation,
        data = master_list$functions$LGW_FUNC_impute$value(x = master_list[[idx_data]]$data$filtered_data$data),
        features = master_list[[idx_data]]$data$filtered_data$features
      )
  
      #create table for report
      
      #1. data to shorthand object
      pre_data <- master_list[[idx_data]]$data$filtered_data$data
      pre_data_missing <- length(which(pre_data==0)) + length(which(is.na(pre_data)))
      post_data <- master_list[[idx_data]]$data$imputed_data$data
      post_data_missing <- length(which(post_data==0)) + length(which(is.na(post_data)))
      
    
      #. calculate output table
    master_list$tables$missing_values_table <- master_list$tables$missing_values_table %>%
      bind_rows(., bind_cols(
        "project" = idx_data,
        "pre-impute: missing values (%)" = paste0(pre_data_missing, " (", round((100/prod(dim(pre_data)))*pre_data_missing,2),")"),
        "post-impute: missing values (%)" = paste0(post_data_missing, " (", round((100/prod(dim(post_data)))*post_data_missing,2),")")
        ))
}


#clean environment
rm(list = c(ls()[which(ls() != "master_list")]))

#print table for report
master_list$tables$missing_values_table %>% 
  kbl(align = "c") %>% 
  kable_minimal("hover", full_width = T)

```

<br />

## Results

### Multivariate data analysis

#### Principal Component Analysis (PCA)

-   Principal Component Analysis (PCA) was conducted to check the quality of the data. PCA is an unsupervised model (i.e. no prior group information is supplied to the model, labelling and colours applied after the model construction). This allows for observations on the quality of the dataset

-   Patterns in the data between samples can also be observed - this may be as a result of either biological or analytical differences - e.g. differences in sample collection, handling or storage

##### Pre-processed data - no batch or signal drift correction

```{r PCA, eval = TRUE, echo = TRUE, warning = FALSE}

#create a html taglist (work around for rendering plotly html in a loop in .RMD documents) and set up iterative idx (i)
print_lst <- htmltools::tagList(); i <- 1

#run loop
for(idx_data in master_list$project_details$sub_projects){
  #pca_lst to store PCA settings for loop
  pca_lst <- lst(
    "sample type" = lst(header = "sample_type_factor", include_qc = TRUE, include_sample = TRUE,
                        plot_colours = c("steelblue1", "white")),
    "batch [all samples]" = lst(header = "sample_batch_factor", include_qc = TRUE, include_sample = TRUE,
                                plot_colours = c(brewer.pal(n = length(unique(
                                  master_list[[idx_data]]$data$imputed_data$annotation$sample_batch_factor)), name = "Accent"))),
    "batch [qc samples only]" = lst(header = "sample_batch_factor", include_qc = TRUE, include_sample = FALSE,
                                    c(brewer.pal(n = length(unique(
master_list[[idx_data]]$data$imputed_data$annotation$sample_batch_factor)), name = "Accent"))),
    "sample class" = lst(header = "sample_class_factor", include_qc = TRUE, include_sample = TRUE,
                         plot_colours = master_list$project_details$project_colours[which(
                           levels(master_list[[idx_data]]$data$imputed_data$annotation$sample_class_factor) %in%
                             unique( master_list[[idx_data]]$data$imputed_data$annotation[[master_list$project_details$project_class_column_header]]))]),
  )

  # complete PCA analysis
  for(idx_pca in names(pca_lst)){
    master_list[[idx_data]]$results$pca[[idx_pca]] <- master_list$functions$LGW_FUNC_pca$value(
                    FUNC_data = bind_cols(master_list[[idx_data]]$data$imputed_data$annotation, 
                                          master_list[[idx_data]]$data$imputed_data$data),
                    FUNC_metabolite_list = master_list[[idx_data]]$data$imputed_data$features,
                    FUNC_STRING_title = paste0("PCA (coloured by ",idx_pca,"); ", idx_data),
                    FUNC_STRING_legend_title = idx_pca,
                    FUNC_HEADER_colour_by = pca_lst[[idx_pca]]$header,
                    FUNC_HEADER_plot_label = "sample_id",
                    FUNC_OPTION_scaling = "standard",
                    FUNC_OPTION_log_data = TRUE,
                    FUNC_OPTION_plot_colours = pca_lst[[idx_pca]]$plot_colours,
                    FUNC_OPTION_invert_x = FALSE,
                    FUNC_OPTION_invert_y = FALSE,
                    FUNC_OPTION_include_qc = pca_lst[[idx_pca]]$include_qc,
                    FUNC_OPTION_include_sample = pca_lst[[idx_pca]]$include_sample
    )
        print_lst[[i]] <- master_list[[idx_data]]$results$pca[[idx_pca]]$plot_combined; i <- i+1
      }}
  
print_lst

```

#### Orthogonal Projections to Latent Structures Discriminant Analysis (OPLS-DA)

-   Orthogonal Projections to Latent Structures Discriminant Analysis (OPLS-DA) was conducted to identify separation between the groups

-   OPLS-DA is a supervised model, where groups are pre-defined before modelling. It can be used as a classifier to see observe differences in the metabolite data that exist between the two classes e.g. (control vs case).

```{r OPLS-DA, eval = TRUE, echo = TRUE,  warning=FALSE, results='asis'}

#create a html taglist (work around for rendering plotly html in a loop in .RMD documents) and start iterative idx for printing
print_list <- htmltools::tagList(); i <- 1

for(idx_data in master_list$project_details$sub_projects){ 
  master_list[[idx_data]]$results$opls <- lst()
  #create OPLS-DA
  master_list[[idx_data]]$results$opls <- master_list$functions$LGW_FUNC_rOPLS$value(
    FUNC_data = bind_cols(master_list[[idx_data]]$data$imputed_data$annotation,
                          master_list[[idx_data]]$data$imputed_data$data), 
    FUNC_metabolite_list = master_list[[idx_data]]$data$imputed_data$features,
    FUNC_OPLS_comparison_control = master_list$project_details$opls$control,
    FUNC_OPLS_comparison_test = master_list$project_details$opls$case,
    FUNC_HEADER_class = "sample_class_factor",
    FUNC_OPTION_colour_by = "sample_class_factor",
    FUNC_OPTION_plot_label = "sample_id",
    FUNC_OPTION_scaling = "pareto",
    FUNC_OPTION_log_data = TRUE,
    FUNC_OPTION_title = "",
    FUNC_OPTION_project_colours = master_list$project_details$project_colours,
    FUNC_OPTION_max_orth = 1,
    FUNC_OPTION_invert_x = FALSE,
    FUNC_OPTION_invert_y = FALSE
  )
 
  #add to print list for rendering in report, add iterative idx
  for(idx_case in names(master_list[[idx_data]]$results$opls)){
  print_list[[i]] <- master_list[[idx_data]]$results$opls[[idx_case]]$plot_combined; i <- i+1
  print_list[[i]] <- master_list[[idx_data]]$results$opls[[idx_case]]$loading_bar; i <- i+1
}
}
print_list

```

### Univariate analysis

-   Inter-group means were compared using non-parametric analysis (Kruskal-Wallis)\
-   Individual lipids that returned a p value of \< 0.05, then underwent analysis using Dunn's test, to report specific inter-group differences\
-   Significant lipids from the test are displayed in the table

#### Results table

<br />

```{r compare means, eval=TRUE, echo=TRUE, warning=FALSE, error=FALSE, message=FALSE,results='asis'}

for(idx_data in master_list$project_details$sub_projects){
  master_list[[idx_data]]$results$univariate <- lst()

#create a html taglist (work around for rendering kable html in a loop in .RMD documents) and start iterative idx for printing
print_list <- htmltools::tagList(); i <- 1
  #find project colours to use to consistently match PCA and OPLS
  plot_colours <- master_list$project_details$project_colours[which(
    levels(master_list[[idx_data]]$data$imputed_data$annotation$sample_class_factor) %in% master_list$project_details$univariate$comparison)]

    #perform univariate and stats 
  master_list[[idx_data]]$results$univariate <- master_list$functions$LGW_FUNC_univariate$value(
    FUNC_data = bind_cols(master_list[[idx_data]]$data$imputed_data$annotation,
                          master_list[[idx_data]]$data$imputed_data$data),
    FUNC_metabolite_list = master_list[[idx_data]]$data$imputed_data$features,
    FUNC_class_to_include = master_list$project_details$univariate$comparison,
    FUNC_HEADER_class = "sample_class_factor",
    FUNC_HEADER_colour = "sample_class_factor",
    FUNC_OPTION_colour_choice <- plot_colours, 
    FUNC_OPTION_log_plot_data = FALSE,
    FUNC_OPTION_compare_means_method = master_list$project_details$univariate$method, #OPTIONS = kruskal.test, wilcox.test, wilcox.test.paired
    FUNC_HEADER_paired = NA, #if paired test is desired add here the linking column header, else = NA
    FUNC_plot_comparisons = NA, ##only required for specific Mann.Whitney; e.g. c("admission - presurgery")
    FUNC_OPTION_plot_qc = FALSE,
    FUNC_OPTION_plot_show_legend = FALSE,
    FUNC_OPTION_plot_outliers = FALSE,
    FUNC_OPTION_point_size = 1
)
  
  # p value control for multiple testing
  master_list[[idx_data]]$results$univariate$table <- master_list[[idx_data]]$results$univariate$table %>%
    select(-"p.adj", - "p.format") %>%
    add_column(padj = p.adjust(p =  master_list[[idx_data]]$results$univariate$table$p, method = "BH"), 
               .after = "p") %>%
    arrange(p)
  
  #add kable to print_list for report
master_list[[idx_data]]$results$univariate$table %>%
  kbl(align = "c", booktabs = TRUE, longtable = TRUE) %>%
  kable_minimal("hover") %>%
  kable_styling(font_size = 10) %>%
  scroll_box(height = "500px") %>% print()


}




```

#### Univariate boxplots

-   Boxplots for metabolites that returned a Kruskal Wallis \<0.05 are displayed below

-   The False Discovery Rate was controlled using the method proposed by Bejamini and Hochburg

Boxplot annotation:\
\* = p\<0.05\
\*\* = p\<0.01\
\*\*\* = p\<0.001\
\*\*\*\* = p\<0.0001

```{r print boxplots, eval=TRUE, echo=TRUE, warning=FALSE, error=FALSE, message=FALSE,results='asis', fig.width=2.8, fig.height=2.8, out.height="80%", out.width = "80%", dpi=300, fig.show="hold"}

  #print sig boxplots
  for(idx_data in master_list$project_details$sub_projects){
sig_max <- which(master_list[[idx_data]]$results$univariate$table$padj <0.05) %>% max()
for (idx_plot in master_list[[idx_data]]$results$univariate$table$feature[1:sig_max]){
print(master_list[[idx_data]]$results$univariate$bp[[idx_plot]])
}
}

```
